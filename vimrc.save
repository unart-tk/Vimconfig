set nocompatible        " Vi-incompatible behavior
let g:authorname="Ben Leak"
let g:authorsite="leakin.org"
let g:authoremail="ben@leakin.org"





"autowrite - Write the contents of the file, if it has been modified, on each :next, :rewind, :last, :first, :previous, :stop, :suspend, :tag, :!, :make, CTRL-] and CTRL-^ command [...]
set autowrite


set hidden
set nu
set visualbell          " Don't beep, flash screen on errors
"colorscheme      " Put your favorite here
colorscheme elflord

set ai                  " Auto Indent
set si                  " Smart Indent
set ic                  " Ignore case when searching

set expandtab           " Expand tabs to whitespaces
set smartindent
set tabstop=4           " 1 Tabstop = 4 Whitespaces
set shiftwidth=4        " 4 Whitespaces indentation
set expandtab
set softtabstop=4       " 4 Whitespaces for text operations (backspace etc)


"switch tabs with ctrl-tab
"map <special> <C-Tab> :tabn<CR>
"nmap <c-s-tab> :tabprevious<cr>
"imap <c-tab> <esc>:tabnext<cr>
"imap <c-s-tab> <esc>:tabprevious<cr>

"switch buffer with ctrl-tab
"map <special> <C-Tab> :bnext<CR>
nnoremap <special> <C-Tab> :bnext<CR>


"nice Markdown behavior  (mkd.vim)
"augroup mkd
"  autocmd BufRead *.mkd  set ai formatoptions=tcroqn2 comments=n:>
" augroup END

"Loading templates for specific file extension
autocmd! BufNewFile * silent! 0r ~/kit/Vimenv/templates/tpl.%:e
"autocmd bufnewfile *.ad exe "1," . 10 . "g/DATE/s//" .strftime("%d-%m-%Y")
autocmd BufNewFile * %substitute#\[:VIM_EVAL:\]\(.\{-\}\)\[:END_EVAL:\]#\=eval(submatch(1))#ge



"folding for ocaml
"ocaml_folding" 

" Lookup type annotation at cursor position in *.annot file.
" The name for the annot file is derived from the buffer name.
"
function! OCamlType()
    let col  = col('.')
    let line = line('.')
    let file = expand("%:p:r")
    echo system("annot -n -type " . line . " " . col . " " . file . ".annot")
endfunction    
map ,t :call OCamlType()<return>


"set Tlist_Inc_Winwidth=0 

"nerdtree toggle test
map <leader>d :execute 'NERDTreeToggle ' . getcwd()<CR>

"python completion
"autocmd FileType python setlocal omnifunc=pysmell#Complete
"pydiction auto complete
if has("autocmd")
    autocmd FileType python set complete+=k/home/ben/.vim/pydiction/pydiction.py isk+=.,(
endif " has("autocmd")


"" Nerdtree
" ---------
"open nerdtree with shortcut
function OpenNERDTree()
command -nargs=0 OpenNERDTree :call OpenNERDTree()

nmap <ESC>t :OpenNERDTree<CR>

"nerdtree window right
let NERDTreeWinPos="right"
endfunction

"buffer list
nmap <ESC>b :ls<CR>:b<Space>



"open taglist with shortcut
function OpenTlistToggle()
  execute ":TlistToggle"
endfunction
command -nargs=0 OpenTlistToggle :call OpenTlistToggle()

nmap <ESC>l :OpenTlistToggle<CR>

"javascript for taglist plugin
let g:tlist_javascript_settings = 'javascript;s:string;a:array;o:object;f:function'

" the yeti language
au BufNewFile,BufRead *.yeti setlocal filetype=yeti ts=8 sw=4 sts=4 expandtab

" the sleep language
au BufNewFile,BufRead *.sl setlocal filetype=perl ts=8 sw=4 sts=4 expandtab


autocmd BufWriteCmd *.html,*.css,*.gtpl :call Refresh_firefox()
function! Refresh_firefox()
  if &modified
    write
    silent !echo  'vimYo = content.window.pageYOffset;
                 \ vimXo = content.window.pageXOffset;
                 \ BrowserReload();
                 \ content.window.scrollTo(vimXo,vimYo);
                 \ repl.quit();'  |
                 \ nc localhost 4242 2>&1 > /dev/null
  endif
endfunction

let g:SuperTabDefaultCompletionType = 'context' 

"ruby
"autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
"autocmd FileType ruby,eruby let g:rubycomplete_buffer_loading = 1
"autocmd FileType ruby,eruby let g:rubycomplete_rails = 1
"autocmd FileType ruby,eruby let g:rubycomplete_classes_in_global = 1
"improve autocomplete menu color
"highlight Pmenu ctermbg=238 gui=bold
"
"

"the the noweb plugin
" http://www.vim.org/scripts/script.php?script_id=3038
au BufRead,BufNewFile *.nw    set filetype=noweb
au BufRead,BufNewFile *.src    set filetype=noweb
au BufRead,BufNewFile *.lp    set filetype=noweb


let noweb_backend = "pdc"
let noweb_language = "perl"
let noweb_fold_code = 0


" Filetypes
au BufRead,BufNewFile *.txt    set filetype=pdc " pandoc 

"fix indention
"http://blogs.perl.org/users/steffen_mueller/2010/08/tiny-vim-convenience-hack.html
function! Fixide()
     execute ":perl use Text::FindIndent;VIM::DoCommand($_) for Text::FindIndent->to_vim_commands(join '\n', $curbuf->Get(1..$curbuf->Count()));<CR>"
endfunction

" run stuff with f keys
"imap <silent> ii <Esc>:w<CR>:execute system("screen -S sess -p 0 -X stuff './virun.sh\n'")<CR>
nmap  <silent> <F5> <Esc>:w<CR>:execute system("screen -S sess -p 0 -X stuff 'make virun\n'")<CR> |imap <F5> <Esc><F5>
""nmap <silent> <F5> <Esc>:w<CR>:execute system("screen -S sess -p 0 -X stuff 'sh ./virun\n'")<CR>
"nmap  <F7> <Esc>:w<CR>:! ./%<CR> |imap <F7> <Esc><F7>
"nmap  <silent> <F6> <Esc>:w<CR>:execute system("screen -S sess -p 0 -X stuff 'make virun\n'")<CR> |imap <F6> <Esc><F6> 
" is inserted with ctrl-v;Enter
"nnoremap <Esc>  <F5> <CR> 
map <F7> <Esc>:w<CR>:! virun % <CR>
map <F6> <Esc>:w<CR>:! virun % <CR>




"restore cursor position

if has("autocmd")
  " Enable filetype detection
  filetype plugin indent on
 
  " Restore cursor position
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif
endif
if &t_Co > 2 || has("gui_running")
  " Enable syntax highlighting
  syntax on
endif


"cpp omnicompletion
" configure tags - add additional tags here or comment out not-used ones
set tags+=~/.vim/tags/cpp
set tags+=~/.vim/tags/qt4
" build tags of your own project with Ctrl-F12
map <C-F12> :!ctags -R --sort=yes --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_ShowPrototypeInAbbr = 1 " show function parameters
let OmniCpp_MayCompleteDot = 1 " autocomplete after .
let OmniCpp_MayCompleteArrow = 1 " autocomplete after ->
let OmniCpp_MayCompleteScope = 1 " autocomplete after ::
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview


" // The switch of the Source Explorer
nmap <F8> :SrcExplToggle<CR>

" // Set the height of Source Explorer window
let g:SrcExpl_winHeight = 8

" // Set 100 ms for refreshing the Source Explorer
let g:SrcExpl_refreshTime = 100

" // Set "Enter" key to jump into the exact definition context
let g:SrcExpl_jumpKey = "<ENTER>"

" // Set "Space" key for back from the definition context
let g:SrcExpl_gobackKey = "<SPACE>"

" // In order to Avoid conflicts, the Source Explorer should know what plugins
" // are using buffers. And you need add their bufname into the list below
" // according to the command ":buffers!"
let g:SrcExpl_pluginList = [
        \ "__Tag_List__",
        \ "_NERD_tree_",
        \ "Source_Explorer"
    \ ]
" // Enable/Disable the local definition searching, and note that this is not
" // guaranteed to work, the Source Explorer doesn't check the syntax for now.
" // It only searches for a match with the keyword according to command 'gd'
let g:SrcExpl_searchLocalDef = 1

" // Let the Source Explorer update the tags file when opening
let g:SrcExpl_isUpdateTags = 1

" // Use program 'ctags' with argument '--sort=foldcase -R' to create or
" // update a tags file
let g:SrcExpl_updateTagsCmd = "ctags --sort=foldcase -R ."

" // Set "<F12>" key for updating the tags file artificially
let g:SrcExpl_updateTagsKey = "<F12>" 



" close buffer, but not the (split) window
map fc <Esc>:call CleanClose(1)

map fq <Esc>:call CleanClose(0)


function! CleanClose(tosave)
if (a:tosave == 1)
    w!
endif
let todelbufNr = bufnr("%")
let newbufNr = bufnr("#")
if ((newbufNr != -1) && (newbufNr != todelbufNr) && buflisted(newbufNr))
    exe "b".newbufNr
else
    bnext
endif

if (bufnr("%") == todelbufNr)
    new
endif
exe "bd".todelbufNr
endfunction

"if a buffer is already opened in one of the windows, Vim will jump to that window, instead of creating a new window
set switchbuf=useopen

" code regions: 
" http://vim.wikia.com/wiki/VimTip857
function! TextEnableCodeSnip(filetype,start,end,textSnipHl) abort
  let ft=toupper(a:filetype)
  let group='textGroup'.ft
  if exists('b:current_syntax')
    let s:current_syntax=b:current_syntax
    " Remove current syntax definition, as some syntax files (e.g. cpp.vim)
    " do nothing if b:current_syntax is defined.
    unlet b:current_syntax
  endif
  execute 'syntax include @'.group.' syntax/'.a:filetype.'.vim'
  try
    execute 'syntax include @'.group.' after/syntax/'.a:filetype.'.vim'
  catch
  endtry
  if exists('s:current_syntax')
    let b:current_syntax=s:current_syntax
  else
    unlet b:current_syntax
  endif
  execute 'syntax region textSnip'.ft.'
  \ matchgroup='.a:textSnipHl.'
  \ start="'.a:start.'" end="'.a:end.'"
  \ contains=@'.group
endfunction

call TextEnableCodeSnip('perl' ,'\~\~\~\~{\.perl' ,'\~\~\~\~', 'SpecialComment')
call TextEnableCodeSnip('c' ,'\~\~\~\~{\.c' ,'\~\~\~\~', 'SpecialComment')
"call TextEnableCodeSnip('ocaml' ,'\~\~\~\~{\.ocaml' ,'\~\~\~\~', 'SpecialComment')
call TextEnableCodeSnip('python' ,'\~\~\~\~{\.python' ,'\~\~\~\~', 'SpecialComment')

"Manage addons with pathogen
" Use pathogen to easily modify the runtime path to include all
" plugins under the ~/.vim/bundle directory
" ( Needed on some linux distros.  " " see " http://www.adamlowe.me/2009/12/vim-destroys-all-other-rails-editors.html)
filetype off
call pathogen#helptags()
call pathogen#runtime_append_all_bundles()

syntax on               " Always have syntax highlighting

filetype plugin on
filetype indent on

